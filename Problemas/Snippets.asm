;###############Inicializador Stack#############################################
stack_ini:
ldi r16, HIGH(RAMEND)
out SPH, r16
ldi r16, LOW(RAMEND)
out spl, r16 ;inicializa el stack al fondo de la memoria
;###############################################################################
;-------------------------------------------------------------------------------
;###############Configurar puertos##############################################
INIT_HARDW:
  ;Pone unos en las posiciones de los pines declarados
  push r16
  ldi r16, (0<<PB4)|(0<<PB3)|(0<<PB2|(1<<PB1)|(1<<PB0) ;1 salida, 0 entrada
  out DDRB, r16
  pop r16
  ret
;###############################################################################
;-------------------------------------------------------------------------------
;##################Configurar INT###############################################
INIT_INT0:
  push r16
  ;Establece que la interrupcion es por flanco asc de INT0
  ldi r16, (1<<ISC11)|(1<<ISC10)(1<<ISC01)|(1<<ISC00) ; 11 es flanco asc
  sts EICRA, r16
  ;Habilita a INT0 e INT1 a ser interrupcion
  ldi r16, (1<<INT1)|(1<<INT0)
  out EIMSK, r16
  pop r16
  sei
  ret
;###############################################################################
;-------------------------------------------------------------------------------
;###################Configurar PCINT############################################
INIT_PCI:
  push r16
  ldi r16, (1<<PCIE0)   ; Activa vector de interrup
  sts PCICR, r16        ;PCI0=portb, PCI0=portc, PCI2=portd
  ldi r16, (1<<PCINT3)|(1<<PCINT2)|(1<<PCINT1)|(1<<PCINT0)
  sts PCMSK_BCD, r16       ; Activa primeros 4 pines de PCI0=PORTB
  sei
  ret
;###############################################################################
;-------------------------------------------------------------------------------
;#################Guardar SREG##################################################
save_sreg:
  push R0
  in R0, SREG
  push R0
load_sreg:
  pop R0
  out SREG, R0
  pop R0
;###############################################################################
;-------------------------------------------------------------------------------
;#################DELAY de 1ms##################################################
delay:
  push r16
  push r17
  push r18
  ldi r16, SREG
  ldi r18, 209
L2:
  ldi r17, 255
L1:
  dec r17
  brne L1
  dec r18
  brne L2
  out SREG, r16
  pop r18
  pop r17
  pop r16
  ret
;###############################################################################
;-------------------------------------------------------------------------------
;############################Inicializar puntero ###############################
init_pointer:
  ldi XH, HIGH($0100) ;cargo el registro X con la posicion en memoria 0x100
  ldi XL, LOW($0100)
  ret
;###############################################################################
;-------------------------------------------------------------------------------
;######################Conversion BCD a 7seg####################################
BCDto7seg:
  push r20
  ldi ZL, LOW(table<<1) ;inicializa en puntero Z en la posicion de 'table'
  ldi ZH, HIGH(table<<1)
  add ZL, r20  ;se ubica al puntero Z en la posicion leida
  clr r20
  adc ZH, r20
  lpm r21, Z  ; se carga a r21 con el dato de la tabla (conversion)
  pop r20
  ret
;###############################################################################
;-------------------------------------------------------------------------------
;###################TABLA BCD A 7SEG############################################
table:
  .db 0b01111110, 0b00110000, 0b01101101, 0b01111001
  ;       0     ,     1     ,     2     ,     3
  .db 0b00110011, 0b01011011, 0b01011111, 0b01110000
  ;       4     ,      5     ,     6     ,     7
  .db 0b01111111, 0b01111011, 0b01110111, 0b01111100
  ;        8     ,     9     ,     A     ,     B
  .db 0b00111001, 0b01011110, 0b01111001, 0b01110001
  ;        C     ,     D     ,     E     ,     F
;###############################################################################
